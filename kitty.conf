# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Fonts {{{

# font_family 	    SauceCodePro Nerd Font Medium
# bold_font         SauceCodePro Nerd Font Bold
# italic_font       SauceCodePro Nerd Font Medium Italic
# bold_italic_font  SauceCodePro Nerd Font Bold Italic
# font_size 13.0

# font_family       FantasqueSansMono Nerd Font Regular
# bold_font         FantasqueSansMono Nerd Font Bold
# italic_font       FantasqueSansMono Nerd Font Italic
# bold_italic_font  FantasqueSansMono Nerd Font Bold Italic
# font_size 15.0

font_family       mononoki Nerd Font Regular
bold_font         mononoki Nerd Font Bold
italic_font       mononoki Nerd Font Italic
bold_italic_font  mononoki Nerd Font BoldItalic
active_tab_font_style   Bold
inactive_tab_font_style Regular
font_size 15.0

adjust_line_height  150%

#: }}}

#: Cursor customization {{{

cursor #fbfcfc
cursor_shape block

#: The cursor shape can be one of (block, beam, underline)

cursor_blink_interval      0.4
# cursor_stop_blinking_after 15.0

#: }}}

#: Scrollback {{{

wheel_scroll_multiplier 1.0

#: }}}

#: Mouse {{{

# url_color #0087BD
# url_style curly

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly

open_url_modifiers alt

#: The modifier keys to press when clicking with the mouse on URLs to
#: open the URL

# open_url_with default

#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler.

copy_on_select yes

#: Copy to clipboard on select. With this enabled, simply selecting
#: text with the mouse will cause the text to be copied to clipboard.
#: Useful on platforms such as macOS/Wayland that do not have the
#: concept of primary selections. Note that this is a security risk,
#: as all programs, including websites open in your browser can read
#: the contents of the clipboard.

# rectangle_select_modifiers ctrl+alt

#: The modifiers to use rectangular selection (i.e. to select text in
#: a rectangular block with the mouse)

# select_by_word_characters :@-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alpha-numeric character in the unicode database will be matched.

# click_interval 0.5

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds)

# mouse_hide_wait 3.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.

focus_follows_mouse yes

#: Set the active window to the window under the mouse when moving the
#: mouse around

#: }}}

#: Performance tuning {{{

repaint_delay 10

#: Delay (in milliseconds) between screen updates. Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS you have to either
#: set sync_to_monitor to no or use a monitor with a high refresh
#: rate.

input_delay 4

#: Delay (in milliseconds) before input from the program running in
#: the terminal is processed. Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.

#: }}}

#: Terminal bell {{{

enable_audio_bell no
window_alert_on_bell no.

# bell_on_tab yes

#: Show a bell symbol on the tab if a bell occurs in one of the
#: windows in the tab and the window is not the currently focused
#: window

#: }}}

#: Window layout {{{

# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400

enabled_layouts Tall, Grid, Vertical
enabled_layouts tall:bias=70

# window_resize_step_cells 2
# window_resize_step_lines 2

window_border_width 1.0

# window_margin_width 0.0

# single_window_margin_width -1000.0

#: The window margin (in pts) to use when only a single window is
#: visible. Negative values will cause the value of
#: window_margin_width to be used instead.

# window_padding_width 0.0

# inactive_text_alpha 0.9

#: }}}

#: Tab bar {{{

tab_bar_edge top

#: Which edge to show the tab bar on, top or bottom

tab_bar_margin_width 10.0
tab_bar_style separator

#: The tab bar style, can be one of: fade or separator. In the fade
#: style, each tab's edges fade into the background color, in the
#: separator style, tabs are separated by a configurable separator.

tab_fade 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

tab_separator " â”‚ "

#: }}}

#: Color scheme {{{
# foreground #cbe3e7
# background #1b182c
# selection_foreground #1b182c
# selection_background #cbe3e7
# color0 #565575
# color8 #100e23
# #: black
# color1 #ff8080
# color9 #ff5458
# #: red
# color2  #95ffa4
# color10 #62d196
# #: green
# color3  #ffe9aa
# color11 #ffb378
# #: yellow
# color4  #91ddff
# color12 #65b2ff
# #: blue
# color5  #c991e1
# color13 #906cff
# #: magenta
# color6  #aaffe4
# color14 #63f2f1
# #: cyan
# color7  #cbe3e7
# color15 #a6b3cc
# #: white

active_tab_background   #fdf6e3
active_tab_foreground   #586e75
inactive_tab_background #EEE8D5
inactive_tab_foreground #839496


background #fdf6e3
foreground #586e75
selection_background #586e75
selection_foreground #fdf6e3
url_color #657b83
cursor #586e75

# normal
color0 #fdf6e3
color1 #dc322f
color2 #859900
color3 #b58900
color4 #268bd2
color5 #6c71c4
color6 #2aa198
color7 #586e75

# bright
color8 #839496
color9 #cb4b16
color10 #eee8d5
color11 #93a1a1
color12 #657b83
color13 #073642
color14 #d33682
color15 #586e75

active_border_color #839496
inactive_border_color #fdf6e3

#: Advanced {{{

# shell .

#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login to ensure that the shell starts in interactive mode and
#: reads its startup rc files.

# editor .

#: The console editor to use when editing the kitty config file or
#: similar tasks. A value of . means to use the environment variable
#: EDITOR. Note that this environment variable has to be set not just
#: in your shell startup scripts but system-wide, otherwise kitty will
#: not see it.

# close_on_child_death no

#: Close the window when the child process (shell) exits. If no (the
#: default), the terminal will remain open when the child exits as
#: long as there are still processes outputting to the terminal (for
#: example disowned or backgrounded processes). If yes, the window
#: will close as soon as the child process exits. Note that setting it
#: to yes means that any background processes still using the terminal
#: can fail silently because their stdout/stderr/stdin no longer work.

# allow_remote_control no

#: Allow other programs to control kitty. If you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc. Note that this even works over ssh
#: connections.

# startup_session none

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See sessions in the kitty documentation for
#: details. Note that relative paths are interpreted with respect to
#: the kitty config directory. Environment variables in the path are
#: expanded.

# clipboard_control write-clipboard write-primary

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: set of possible actions is: write-clipboard read-clipboard write-
#: primary read-primary The default is to allow writing to the
#: clipboard and primary selection. Note that enabling the read
#: functionality is a security risk as it means that any program, even
#: one running on a remote server via SSH can read your clipboard.

# term xterm-kitty

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on Stack Overflow
#: to change it.

#: }}}

#: OS specific tweaks {{{

macos_titlebar_color background

macos_option_as_alt yes

#: Use the option key as an alt key. With this set to no, kitty will
#: use the macOS native Option+Key = unicode character behavior. This
#: will break any Alt+key keyboard shortcuts in your terminal
#: programs, but you can use the macOS unicode input technique.

macos_quit_when_last_window_closed yes

#: }}}

#: Keyboard shortcuts {{{

#: For a list of key names, see: GLFW keys
#: <http://www.glfw.org/docs/latest/group__keys.html>. The name to use
#: is the part after the GLFW_KEY_ prefix. For a list of modifier
#: names, see: GLFW mods
#: <http://www.glfw.org/docs/latest/group__mods.html>
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you should only use an XKB key
#: name for keys that are not present in the list of GLFW keys.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration.

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

kitty_mod ctrl+alt

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

# clear_all_shortcuts no

#: You can have kitty remove all shortcut definition seen up to this
#: point. Useful, for instance, to remove the default shortcuts.

#: Clipboard {{{

# map cmd+c        copy_to_clipboard
# map kitty_mod+c  copy_to_clipboard
# map cmd+v        paste_from_clipboard
# map kitty_mod+v  paste_from_clipboard
# map kitty_mod+s  paste_from_selection
# map shift+insert paste_from_selection
#: You can also pass the contents of the current selection to any
#: program using pass_selection_to_program. By default, the system's
#: open program is used, but you can specify your own, for example::

#:     map kitty_mod+o pass_selection_to_program firefox

#: You can pass the current selection to a terminal program running in
#: a new kitty window, by using the @selection placeholder::

#:     map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

# map kitty_mod+up        scroll_line_up
# map kitty_mod+k         scroll_line_up
# map kitty_mod+down      scroll_line_down
# map kitty_mod+j         scroll_line_down
# map kitty_mod+page_up   scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map kitty_mod+home      scroll_home
# map kitty_mod+end       scroll_end
# map kitty_mod+h         show_scrollback

#: You can send the contents of the current screen + history buffer as
#: stdin to an arbitrary program using the placeholders @text (which
#: is the plain text) and @ansi (which includes text styling escape
#: codes). For only the current screen, use @screen or @ansi_screen.
#: For example, the following command opens the scrollback buffer in
#: less in a new window::

#:     map kitty_mod+y new_window @ansi less +G -R

#: }}}

#: Window management {{{

# map cmd+d new_window

#: You can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      new_window mutt

#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

map cmd+d    new_window_with_cwd

map ctrl+n  new_os_window
map cmd+w close_window
map cmd+l next_window
map cmd+h previous_window
map cmd+alt+l move_window_forward
map cmd+alt+h move_window_backward
map kitty_mod+` move_window_to_top
map kitty_mod+r start_resizing_window
map ctrl+1 first_window
map ctrl+2 second_window
map ctrl+3 third_window
map ctrl+4 fourth_window
map ctrl+5 fifth_window
map ctrl+6 sixth_window
map ctrl+7 seventh_window
map ctrl+8 eighth_window
map ctrl+9 ninth_window
map ctrl+0 tenth_window
#: }}}

#: Tab management {{{

map kitty_mod+right next_tab
map kitty_mod+left  previous_tab
map kitty_mod+t     new_tab_with_cwd
map kitty_mod+w     close_tab
map kitty_mod+.     move_tab_forward
map kitty_mod+,     move_tab_backward
map kitty_mod+1 goto_tab 1
map kitty_mod+2 goto_tab 2
map kitty_mod+3 goto_tab 3
map kitty_mod+4 goto_tab 4
map kitty_mod+5 goto_tab 5
map kitty_mod+6 goto_tab 6
map kitty_mod+7 goto_tab 7
map kitty_mod+8 goto_tab 8
map kitty_mod+9 goto_tab 9
map kitty_mod+10 goto_tab 10

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd.
#: }}}

#: Layout management {{{

# map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty windows at a
#: time or only the current one.

map kitty_mod+equal change_font_size current +1.0
map kitty_mod+minus change_font_size current -1.0
# map kitty_mod+shift+minus     change_font_size all -1.0
# map kitty_mod+backspace change_font_size all 0

#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current window's font size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

# map kitty_mod+e kitten hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

# map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

# map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+u      input_unicode_character
# map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m set_background_opacity +0.1
# map kitty_mod+a>l set_background_opacity -0.1
# map kitty_mod+a>1 set_background_opacity 1
# map kitty_mod+a>d set_background_opacity default

#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: cl ient program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: }}}

# }}}
